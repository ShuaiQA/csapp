# Execution begins at address 0
	.pos 0
	irmovq stack ,%rsp   #set up stack pointer
	call main            #exe main program

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
	irmovq ele1,%rdi    # 将链表的首地址放到rdi寄存器中
	call rsum_list
	ret

rsum_list:
    irmovq $0,%rax
	andq %rdi,%rdi       # 查看rdi是否是0
	je last              # ==0跳转到last
	mrmovq (%rdi),%r10   # 将链表中的值放到r10寄存器中
	pushq %r10           # 将当前的值保存到栈中，不然下次递归会覆盖
	mrmovq 8(%rdi),%rdi
	call rsum_list
	popq %r10
	addq %r10,%rax
last:
	ret

#Stack starts here and grows to lower addresses
          .pos 0x100
stack:




